{"meta":{"title":"张恒强的博客","subtitle":"专注技术三十年","description":"随意而写，记录随笔生活","author":"张恒强","url":"https://zhanghqgit.github.io"},"pages":[],"posts":[{"title":"mysql数据库乐观锁","slug":"database-occ","date":"2016-09-16T15:29:03.000Z","updated":"2016-09-16T15:56:26.000Z","comments":true,"path":"2016/09/16/database-occ/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/16/database-occ/","excerpt":"","text":"前面谈到了MySQL悲观锁，但是悲观锁并不是适用于任何场景，它也有它存在的一些不足，因为悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响了程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是对长事务而言，这样的开销往往无法承受。所以与悲观锁相对的，我们有了乐观锁，具体参见下面介绍 乐观锁介绍乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。那么我们如何实现乐观锁呢，一般来说有以下2种方式 1.使用数据版本（Version）记录机制实现 这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。用下面的一张图来说明如上图所示，如果更新操作顺序执行，则数据的版本（version）依次递增，不会产生冲突。但是如果发生有不同的业务操作对同一版本的数据进行修改，那么，先提交的操作（图中B）会把数据version更新为2，当A在B之后提交更新时发现数据的version已经被修改了，那么A的更新操作会失败 2.时间戳乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）, 和上面的version类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突,注意,在并发高时，需要注意时间戳的精度问题 举例使用还是拿之前的实例来举：商品goods表中有一个字段status，status为1代表商品未被下单，status为2代表商品已经被下单，那么我们对某个商品下单时必须确保该商品status为1。假设商品的id为112345678下单操作包括3步骤：1.查询出商品信息select (status,status,version) from t_goods where id=#&#123;id&#125;2.根据商品信息生成订单3.修改商品status为2update t_goods set status=2,version=version+1where id=#&#123;id&#125; and version=#&#123;version&#125;;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/tags/数据库/"},{"name":"乐观锁","slug":"乐观锁","permalink":"https://zhanghqgit.github.io/tags/乐观锁/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}]},{"title":"mysql 悲观锁","slug":"database-pcc","date":"2016-09-16T15:28:58.000Z","updated":"2016-09-16T15:45:38.000Z","comments":true,"path":"2016/09/16/database-pcc/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/16/database-pcc/","excerpt":"","text":"1.悲观锁介绍 悲观锁，正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据） 2.使用场景举例：以MySQL InnoDB为例 商品goods表中有一个字段status，status为1代表商品未被下单，status为2代表商品已经被下单，那么我们对某个商品下单时必须确保该商品status为1。假设商品的id为1 1.如果不采用锁，那么操作方法如下123456//1.查询出商品信息select status from t_goods where id=1;//2.根据商品信息生成订单insert into t_orders (id,goods_id) values (null,1);//3.修改商品status为2update t_goods set status=2; 上面这种场景在高并发访问的情况下很可能会出现问题前面已经提到，只有当goods status为1时才能对该商品下单，上面第一步操作中，查询出来的商品status为1。但是当我们执行第三步Update操作的时候，有可能出现其他人先一步对商品下单把goods status修改为2了，但是我们并不知道数据已经被修改了，这样就可能造成同一个商品被下单2次，使得数据不一致。所以说这种方式是不安全的 2.使用悲观锁来实现在上面的场景中，商品信息从查询出来到修改，中间有一个处理订单的过程，使用悲观锁的原理就是，当我们在查询出goods信息后就把当前的数据锁定，直到我们修改完毕后再解锁。那么在这个过程中，因为goods被锁定了，就不会出现有第三者来对其进行修改了 注：要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交 1234567891011121314//我们可以使用命令设置MySQL为非autocommit模式：set autocommit=0; //设置完autocommit后，我们就可以执行我们的正常业务了。具体如下：//0.开始事务begin;/begin work;/start transaction; (三者选一就可以)//1.查询出商品信息select status from t_goods where id=1 for update;//2.根据商品信息生成订单insert into t_orders (id,goods_id) values (null,1);//3.修改商品status为2update t_goods set status=2;//4.提交事务commit;/commit work; 上面的第一步我们执行了一次查询操作：select status from t_goods where id=1 for update;与普通查询不一样的是，我们使用了select…for update的方式，这样就通过数据库实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改 注：需要注意的是，在事务中，只有SELECT … FOR UPDATE 或LOCK IN SHARE MODE 同一笔数据时会等待其它事务结束后才执行，一般SELECT … 则不受此影响拿上面的实例来说，当我执行select status from t_goods where id=1 for update;后。我在另外的事务中如果再次执行select status from t_goods where id=1 for update;则第二个事务会一直等待第一个事务的提交，此时第二个查询处于阻塞的状态，但是如果我是在第二个事务中执行select status from t_goods where id=1;则能正常查询出数据，不会受第一个事务的影响 3.MySQL select…for update的Row Lock与Table Loc上面我们提到，使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认Row-Level Lock，所以只有「明确」地指定主键，MySQL 才会执行Row lock (只锁住被选取的数据) ，否则MySQL 将会执行Table Lock (将整个数据表单给锁住) 举例说明数据库表t_goods，包括id,status,name三个字段，id为主键，数据库中记录如下;注：为了测试数据库锁，我使用两个console来模拟不同的事务操作，分别用console1、console2来表示 1.明确指定主键，并且有此数据，row lock123456789101112131415console1：查询出结果，但是把该条数据锁定了mysql&gt; select * from t_goods where id=1 for update;+----+--------+------+| id | status | name |+----+--------+------+| 1 | 1 | 道具 |+----+--------+------+1 row in setmysql&gt;console2：查询被阻塞mysql&gt; select * from t_goods where id=1 for update;console2：如果console1长时间未提交，则会报错mysql&gt; select * from t_goods where id=1 for update;ERROR 1205 : Lock wait timeout exceeded; try restarting transaction 2. 明确指定主键，若查无此数据，无lock123456console1：查询结果为空mysql&gt; select * from t_goods where id=3 for update;Empty setconsole2：查询结果为空，查询无阻塞，说明console1没有对数据执行锁定mysql&gt; select * from t_goods where id=3 for update;Empty set 3. 无主键，table lock123456789101112131415console1：查询name=道具 的数据，查询正常mysql&gt; select * from t_goods where name='道具' for update;+----+--------+------+| id | status | name |+----+--------+------+| 1 | 1 | 道具 |+----+--------+------+1 row in setmysql&gt;console2：查询name=装备 的数据，查询阻塞，说明console1把表给锁住了mysql&gt; select * from t_goods where name='装备' for update;console2：若console1长时间未提交，则查询返回为空mysql&gt; select * from t_goods where name='装备' for update;Query OK, -1 rows affected 4. 主键不明确，table lock12345678910111213141516console1：查询正常mysql&gt; begin;Query OK, 0 rows affectedmysql&gt; select * from t_goods where id&gt;0 for update;+----+--------+------+| id | status | name |+----+--------+------+| 1 | 1 | 道具 || 2 | 1 | 装备 |+----+--------+------+2 rows in setmysql&gt;console2：查询被阻塞，说明console1把表给锁住了mysql&gt; select * from t_goods where id&gt;1 for update; 5. 主键不明确，table lock12345678910111213141516171819202122232425262728console1：mysql&gt; begin;Query OK, 0 rows affectedmysql&gt; select * from t_goods where id&lt;&gt;1 for update;+----+--------+------+| id | status | name |+----+--------+------+| 2 | 1 | 装备 |+----+--------+------+1 row in setmysql&gt;console2：查询被阻塞，说明console1把表给锁住了mysql&gt; select * from t_goods where id&lt;&gt;2 for update;console1：提交事务mysql&gt; commit;Query OK, 0 rows affectedconsole2：console1事务提交后，console2查询结果正常mysql&gt; select * from t_goods where id&lt;&gt;2 for update;+----+--------+------+| id | status | name |+----+--------+------+| 1 | 1 | 道具 |+----+--------+------+1 row in setmysql&gt; 以上就是关于数据库主键对MySQL锁级别的影响实例，需要注意的是，除了主键外，使用索引也会影响数据库的锁定级别 我们修改t_goods表，给status字段创建一个索引,修改id为2的数据的status为2，此时表中数据为12345678mysql&gt; select * from t_goods;+----+--------+------+| id | status | name |+----+--------+------+| 1 | 1 | 道具 || 2 | 2 | 装备 |+----+--------+------+2 rows in set 6. 明确指定索引，并且有此数据，row lock123456789101112131415161718192021console1：mysql&gt; select * from t_goods where status=1 for update;+----+--------+------+| id | status | name |+----+--------+------+| 1 | 1 | 道具 |+----+--------+------+1 row in setmysql&gt;console2：查询status=1的数据时阻塞，超时后返回为空，说明数据被console1锁定了mysql&gt; select * from t_goods where status=1 for update;Query OK, -1 rows affectedconsole2：查询status=2的数据，能正常查询，说明console1只锁住了行，未锁表mysql&gt; select * from t_goods where status=2 for update;+----+--------+------+| id | status | name |+----+--------+------+| 2 | 2 | 装备 |+----+--------+------+1 row in set 7. 明确指定索引，若查无此数据，无lock123456console1：查询status=3的数据，返回空数据mysql&gt; select * from t_goods where status=3 for update;Empty setconsole2：查询status=3的数据，返回空数据mysql&gt; select * from t_goods where status=3 for update;Empty set","categories":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/tags/数据库/"},{"name":"悲观锁","slug":"悲观锁","permalink":"https://zhanghqgit.github.io/tags/悲观锁/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}]},{"title":"数据库事务隔离级别","slug":"database-transaction-level","date":"2016-09-16T14:26:07.000Z","updated":"2016-09-16T14:57:10.000Z","comments":true,"path":"2016/09/16/database-transaction-level/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/16/database-transaction-level/","excerpt":"","text":"S QL:1992 事务隔离级别，InnoDB默认是可重复读的（REPEATABLE READ）。MySQL/InnoDB 提供SQL标准所描述的所有四个事务隔离级别。你可以在命令行用–transaction-isolation选项，或在选项文件里，为所有连接设置默认隔离级别。例如，你可以在my.inf文件的[mysqld]节里类似如下设置该选项：1transaction-isolation = [ READ-UNCOMMITTED | READ-COMMITTED | REPEATABLE-READ | SERIALIZEABLE] 用户可以用SET TRANSACTION语句改变单个会话或者所有新进连接的隔离级别。它的语法如下：1SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL [ READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE] 注意：默认的行为（不带session和global）是为下一个（未开始）事务设置隔离级别。如果你使用GLOBAL关键字，语句在全局对从那点开始创建的所有新连接（除了不存在的连接）设置默认事务级别。你需要SUPER权限来做这个。使用SESSION 关键字为将来在当前连接上执行的事务设置默认事务级别。 任何客户端都能自由改变会话隔离级别（甚至在事务的中间），或者为下一个事务设置隔离级别。 查看全局和绘画事务隔离界别:123select @@global.tx_isolation;select @@session.tx_isolation;select @@tx_isolation; 数据库读数据问题概念 脏读（Dirty Reads） 所谓脏读就是对脏数据（Drity Data）的读取，而脏数据所指的就是未提交的数据。也就是说，一个事务正在对一条记录做修改，在这个事务完成并提交之前，这条数据是处于待定状态的（可能提交也可能回滚），这时，第二个事务来读取这条没有提交的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被称为脏读 不可重复读（Non-Repeatable Reads） 一个事务先后读取同一条记录，但两次读取的数据不同，我们称之为不可重复读。也就是说，这个事务在两次读取之间该数据被其它事务所修改 幻读（Phantom Reads） 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为幻读 数据库事务隔离级别 未提交读（Read Uncommitted） SELECT语句以非锁定方式被执行，所以有可能读到脏数据，隔离级别最低 提交读（Read Committed） 只能读取到已经提交的数据。即解决了脏读，但未解决不可重复读 可重复读（Repeated Read） 在同一个事务内的查询都是事务开始时刻一致的，InnoDB的默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻读 串行读（Serializable） 完全的串行化读，所有SELECT语句都被隐式的转换成SELECT … LOCK IN SHARE MODE，即读取使用表级共享锁，读写相互都会阻塞。隔离级别最高 隔离级别对照表 事务级别 脏读 可重复读 幻读 未提交读 未解决 未解决 未解决 提交读 解决 未解决 未解决 可重复读 解决 解决 未解决 串行读 解决 解决 解决 举例说明各级别情况1. 脏读。脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970session 1:mysql&gt; select @@global.tx_isolation;+-----------------------+| @@global.tx_isolation |+-----------------------+| REPEATABLE-READ |+-----------------------+row in set (0.00 sec)mysql&gt; select @@session.tx_isolation;+-----------------------+| @@session.tx_isolation |+-----------------------+| REPEATABLE-READ |+-----------------------+row in set (0.00 sec)mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; insert into ttd values(1);Query OK, 1 row affected (0.05 sec)mysql&gt; select * from ttd;+------+| id |+------+| 1 |+------+row in set (0.00 sec)session 2:mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| REPEATABLE-READ |+------------------------+row in set (0.00 sec)mysql&gt; select @@global.tx_isolation;+-----------------------+| @@global.tx_isolation |+-----------------------+| REPEATABLE-READ | --------该隔离级别下(除了 read uncommitted)+-----------------------+row in set (0.00 sec)mysql&gt; select * from ttd;Empty set (0.00 sec) --------不会出现脏读mysql&gt; set session transaction isolation level read uncommitted;Query OK, 0 rows affected (0.00 sec)mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| READ-UNCOMMITTED | --------该隔离级别下+------------------------+row in set (0.00 sec)mysql&gt; select * from ttd;+------+| id |+------+| 1 | --------READ UNCOMMITTED级别出现脏读+------+row in set (0.00 sec) 结论:session 2 在READ-UNCOMMITTED 下读取到session 1 中未提交事务修改的数据. 2. 不可重复读：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。防止了脏读，即读取不到未提交的更改，但是可以读取到提交之后的更改。因此不能重复读，因为两次读取的结果不一致1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768session 1:mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| READ-COMMITTED |+------------------------+row in set (0.00 sec)mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from ttd;+------+| id |+------+| 1 |+------+row in set (0.00 sec)session 2 :mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| REPEATABLE-READ |+------------------------+row in set (0.00 sec)mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from ttd;+------+| id |+------+| 1 |+------+row in set (0.00 sec)mysql&gt; insert into ttd values(2); /也可以更新数据Query OK, 1 row affected (0.00 sec)mysql&gt; select * from ttd;+------+| id |+------+| 1 || 2 |+------+rows in set (0.00 sec)mysql&gt; commit;Query OK, 0 rows affected (0.02 sec)session 2 提交后,查看session 1 的结果;session 1:mysql&gt; select * from ttd;+------+| id |+------+| 1 | --------和第一次的结果不一样,READ-COMMITTED 级别出现了不重复读| 2 |+------+rows in set (0.00 sec) 3. 可重复读：repeatable-read级别，防止了不可重复读，但是相应的也读取不到了开始事务之后其他事务的提交。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354session 1:mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| REPEATABLE-READ |+------------------------+row in set (0.00 sec)mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from ttd;+------+| id |+------+| 1 || 2 |+------+rows in set (0.00 sec)session 2 :mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| REPEATABLE-READ |+------------------------+row in set (0.00 sec)mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; insert into ttd values(3);Query OK, 1 row affected (0.00 sec)mysql&gt; commit;Query OK, 0 rows affected (0.03 sec)session 2 提交后,查看session 1 的结果;session 1:mysql&gt; select * from ttd;+------+| id |+------+| 1 | --------和第一次的结果一样,REPEATABLE-READ级别出现了重复读| 2 |+------+rows in set (0.00 sec)(commit session 1 之后 再select * from ttd 可以看到session 2 插入的数据3) 4.幻读: 因为读取不到其他事务提交的结果，所以出现了幻读，第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879mysql&gt;CREATE TABLE `t_bitfly` (`id` bigint(20) NOT NULL default '0',`value` varchar(32) default NULL,PRIMARY KEY (`id`)) ENGINE=InnoDBmysql&gt; select @@global.tx_isolation, @@tx_isolation;+-----------------------+-----------------+| @@global.tx_isolation | @@tx_isolation |+-----------------------+-----------------+| REPEATABLE-READ | REPEATABLE-READ |+-----------------------+-----------------+实验一：t Session A Session B|| START TRANSACTION; START TRANSACTION;|| SELECT * FROM t_bitfly;| empty set| INSERT INTO t_bitfly| VALUES (1, 'a');|| SELECT * FROM t_bitfly;| empty set| COMMIT;|| SELECT * FROM t_bitfly;| empty set|| INSERT INTO t_bitfly VALUES (1, 'a');| ERROR 1062 (23000):| Duplicate entry '1' for key 1v (shit, 刚刚明明告诉我没有这条记录的)如此就出现了幻读，以为表里没有数据，其实数据已经存在了，傻乎乎的提交后，才发现数据冲突了。实验二：t Session A Session B|| START TRANSACTION; START TRANSACTION;|| SELECT * FROM t_bitfly;| +------+-------+| | id | value || +------+-------+| | 1 | a || +------+-------+| INSERT INTO t_bitfly| VALUES (2, 'b');|| SELECT * FROM t_bitfly;| +------+-------+| | id | value || +------+-------+| | 1 | a || +------+-------+| COMMIT;|| SELECT * FROM t_bitfly;| +------+-------+| | id | value || +------+-------+| | 1 | a || +------+-------+|| UPDATE t_bitfly SET value='z';| Rows matched: 2 Changed: 2 Warnings: 0| (怎么多出来一行)|| SELECT * FROM t_bitfly;| +------+-------+| | id | value || +------+-------+| | 1 | z || | 2 | z || +------+-------+ 本事务中第一次读取出一行，做了一次更新后，另一个事务里提交的数据就出现了。也可以看做是一种幻读。当隔离级别是可重复读，且禁用innodb_locks_unsafe_for_binlog的情况下，在搜索和扫描index的时候使用的next-key locks可以避免幻读 再看一个实验，要注意，表t_bitfly里的id为主键字段123456789101112131415161718192021222324252627282930313233343536373839404142434445实验三：t Session A Session B|| START TRANSACTION; START TRANSACTION;|| SELECT * FROM t_bitfly| WHERE id&lt;=1| FOR UPDATE;| +------+-------+| | id | value || +------+-------+| | 1 | a || +------+-------+| INSERT INTO t_bitfly| VALUES (2, 'b');| Query OK, 1 row affected|| SELECT * FROM t_bitfly;| +------+-------+| | id | value || +------+-------+| | 1 | a || +------+-------+| INSERT INTO t_bitfly| VALUES (0, '0');| (waiting for lock ...then timeout)| ERROR 1205 (HY000):| Lock wait timeout exceeded;| try restarting transaction|| SELECT * FROM t_bitfly;| +------+-------+| | id | value || +------+-------+| | 1 | a || +------+-------+| COMMIT;|| SELECT * FROM t_bitfly;| +------+-------+| | id | value || +------+-------+| | 1 | a || +------+-------+ 可以看到，用id&lt;=1加的锁，只锁住了id&lt;=1的范围，可以成功添加id为2的记录，添加id为0的记录时就会等待锁的释放1234567891011121314151617181920212223242526272829303132333435363738394041424344实验四：一致性读和提交读t Session A Session B|| START TRANSACTION; START TRANSACTION;|| SELECT * FROM t_bitfly;| +----+-------+| | id | value || +----+-------+| | 1 | a || +----+-------+| INSERT INTO t_bitfly| VALUES (2, 'b');| COMMIT;|| SELECT * FROM t_bitfly;| +----+-------+| | id | value || +----+-------+| | 1 | a || +----+-------+|| SELECT * FROM t_bitfly LOCK IN SHARE MODE;| +----+-------+| | id | value || +----+-------+| | 1 | a || | 2 | b || +----+-------+|| SELECT * FROM t_bitfly FOR UPDATE;| +----+-------+| | id | value || +----+-------+| | 1 | a || | 2 | b || +----+-------+|| SELECT * FROM t_bitfly;| +----+-------+| | id | value || +----+-------+| | 1 | a || +----+-------+ 如果使用普通的读，会得到一致性的结果，如果使用了加锁的读，就会读到“最新的”“提交”读的结果。 本身，可重复读和提交读是矛盾的。在同一个事务里，如果保证了可重复读，就会看不到其他事务的提交，违背了提交读；如果保证了提交读，就会导致前后两次读到的结果不一致，违背了可重复读。 可以这么讲，InnoDB提供了这样的机制，在默认的可重复读的隔离级别里，可以使用加锁读去查询最新的数据（提交读）。MySQL InnoDB的可重复读并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是next-key locks。 总结: 四个级别逐渐增强，每个级别解决一个问题。事务级别越高,性能越差,大多数环境read committed 可以用.记住4个隔离级别的特点(上面的例子);","categories":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/tags/数据库/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}]},{"title":"数据库事务的ACID属性及隔离级别","slug":"database-acid","date":"2016-09-16T09:35:54.000Z","updated":"2016-09-16T10:00:25.000Z","comments":true,"path":"2016/09/16/database-acid/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/16/database-acid/","excerpt":"","text":"数据库事务的属性ACID 原子性（Atomicity） 所谓原子性就是将一组操作作为一个操作单元，是原子操作，即要么全部执行，要么全部不执行 一致性（Consistency） 事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态 隔离性（Isolation） 隔离性指并发的事务是相互隔离的。即一个事务内部的操作及正在操作的数据必须封锁起来，不被其它企图进行修改的事务看到。 持久性（Durability） 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。即一旦一个事务提交，DBMS（Database Management System）保证它对数据库中数据的改变应该是永久性的，持久性通过数据库备份和恢复来保证 数据库读数据问题概念 脏读（Dirty Reads） 所谓脏读就是对脏数据（Drity Data）的读取，而脏数据所指的就是未提交的数据。也就是说，一个事务正在对一条记录做修改，在这个事务完成并提交之前，这条数据是处于待定状态的（可能提交也可能回滚），这时，第二个事务来读取这条没有提交的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被称为脏读 不可重复读（Non-Repeatable Reads） 一个事务先后读取同一条记录，但两次读取的数据不同，我们称之为不可重复读。也就是说，这个事务在两次读取之间该数据被其它事务所修改 幻读（Phantom Reads） 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为幻读 数据库事务隔离级别 未提交读（Read Uncommitted） SELECT语句以非锁定方式被执行，所以有可能读到脏数据，隔离级别最低 提交读（Read Committed） 只能读取到已经提交的数据。即解决了脏读，但未解决不可重复读 可重复读（Repeated Read） 在同一个事务内的查询都是事务开始时刻一致的，InnoDB的默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻读 串行读（Serializable） 完全的串行化读，所有SELECT语句都被隐式的转换成SELECT … LOCK IN SHARE MODE，即读取使用表级共享锁，读写相互都会阻塞。隔离级别最高 隔离级别对照表 事务级别 脏读 可重复读 幻读 未提交读 未解决 未解决 未解决 提交读 解决 未解决 未解决 可重复读 解决 解决 未解决 串行读 解决 解决 解决","categories":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/tags/数据库/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"https://zhanghqgit.github.io/categories/数据库/"}]},{"title":"markdown-syntax3","slug":"markdown-syntax3","date":"2016-09-13T13:52:06.000Z","updated":"2016-09-13T15:49:32.000Z","comments":true,"path":"2016/09/13/markdown-syntax3/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/13/markdown-syntax3/","excerpt":"","text":"Markdown 文件 NOTE: This is Traditional Chinese Edition Document ofMarkdown Syntax. If you are seeking for English EditionDocument. Please refer to Markdown: Syntax. Markdown: Syntax 概述 哲学 行內 HTML 特殊字元自动转换 区块元素 段落和換行 标題 区块引言 清单 程式码区块 分隔线 区段元素 链接 强调 程式码 图片 其它 跳脱字元 自動链接 感謝 注意：这份文件是用 Markdown 写的，你可以看看它的原始档 。 概述 哲学 Markdown 的目标是实现「易读易写」。 不过最需要強调的便是它的可读性。一份使用 Markdown 格式撰写的文件应该可以直接以纯文字发布，并且看起來不会像是由許多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，然而最大靈感来源其实是纯文字的电子邮件格式。 因此 Markdown 的语法全由标点符号所组成，并经过谨慎筛选，是为了让它们看起來就像所要表达的意思。像是在文字两旁加上星号，看起來就像*强调*。Markdown 的清单看起來，嗯，就是清单。假如你有使用过电子邮件，区块引言看起來就真的像是引用一段文字。 行內 HTML Markdown 的语法有个主要的目的：用來作为一种网络內容的写作用语言。 Markdown 不是要來取代 HTML，甚至也沒有要和它相似，它的语法种类不多，只和 HTML 的一部分有关系，重点不是要创造一种更容易写作 HTML 文件的语法，我认为 HTML 已经很容易写了，Markdown 的重点在于，它能让文件更容易阅读、编写。HTML 是一种发布的格式，Markdown 是一种编写的格式，因此，Markdown 的格式语法只涵盖纯文字可以涵盖的范围。 不在 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 只有区块元素──比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行，以利于內容隔开。而且这些（元素）的开始与结尾标签，不可以用 tab 或是空白來缩排。Markdown 的产生器有智慧型判断，可以避免在区块标签前后加上沒有必要的 &lt;p&gt; 标签。 举例來说，在 Markdown 文件里加上一段 HTML 表格： This is a regular paragraph. &lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; This is another regular paragraph. 请注意，Markdown 语法在 HTML 区块标签中將不会被进行处理。例如，你无法在 HTML 区块內使用 Markdown 形式的*强调*。 HTML 的区块标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 则不受限制，可以在 Markdown 的段落、清单或是标题里任意使用。依照个人习惯，甚至可以不用Markdown 格式，而采用 HTML 标签來格式化。举例说明：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用這些标签，而不用 Markdown 提供的链接或是影像标示语法。 HTML 区段标签和区块标签不同，在区段标签的范围內， Markdown 的语法是有效的。 特殊字元自动转换 在 HTML 文件中，有两个字元需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要使用這些符号，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。 &amp; 符号其实很容易让写作网络文件的人感到折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」 ，还得转换网址內的 &amp; 符号，如果你要链接到： http://images.google.com/images?num=30&amp;q=larry+bird 你必須要把网址转成： http://images.google.com/images?num=30&amp;amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，數量最多的。 Markdown 允许你直接使用这些符号，但是你要小心跳脱字元的使用，如果你是在HTML 实体中使用 &amp; 符号的话，它不会被转换，而在其它情形下，它则会被转换成 &amp;amp;。所以你如果要在文件中插入一个著作权的符号，你可以这样写： &amp;copy; Markdown 將不会对这段文字做修改，但是如果你这样写： AT&amp;T Markdown 就会將它转为： AT&amp;amp;T 类似的状况也会发生在 &lt; 符号上，因为 Markdown 支持 行內 HTML ，如果你是使用 &lt; 符号作为 HTML 标签使用，那 Markdown 也不会对它做任何转换，但是如果你是写： 4 &lt; 5 Markdown 將会把它转换为： 4 &amp;lt; 5 不过需要注意的是，code 范围內，不论是行內还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 区块元素 段落和换行 一个段落是由一个以上相链接的行句组成，而一个以上的空行则会切分出不同的段落（空行的定义是展示上看起來像是空行，便会被视为空行。比方说，若某一行只包含空白和 tab，则该行也会被视为空行），一般的段落不需要用空白或断行缩排。 「一个以上相链接的行句组成」这句话其实暗示了 Markdown 允许段落內的强迫断行，这个特性和其他大部分的 text-to-HTML 格式不一样（包括 MovableType 的「Convert Line Breaks」选项），其它的格式会把每个断行都转成 &lt;br /&gt; 标签。 如果你真的想要插入 &lt;br /&gt; 标签的话，在行尾加上两个以上的空白，然后按 enter。 是的，确实需要花比较多功夫来插入 &lt;br /&gt; ，但是「每个换行都转换为 &lt;br /&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引言 和多段落的 清单 在使用换行來排版的时候，不但更好用，还更好阅读。 标题 Markdown 支持两种标题的语法，Setext 和 atx 形式。 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1 ============= This is an H2 ------------- 任何數量的 = 和 - 都可以有效果。 Atx 形式则是在行首插入 1 到 6 个 # ，對應到標題 1 到 6 階，例如： # This is an H1 ## This is an H2 ###### This is an H6 你可以选择性地「开闭」atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起來比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字数量决定标题的阶数）： # This is an H1 # ## This is an H2 ## ### This is an H3 ###### Blockquotes Markdown 使用 email 形式的区块引言，如果你很熟悉如何在 email 信件中引言，你就知道怎么在 Markdown 文件中建立一个区块引言，那会看起来像是你强迫断行，然后在每行的最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse &gt; id sem consectetuer libero luctus adipiscing. Markdown 也允许你只在整个段落的第一行最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 区块引言可以有嵌套（例如：引言内的引言），只要根据层次加上不同数量的 &gt; ： &gt; This is the first level of quoting. &gt; &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level. 引言的区块內也可以使用其他的 Markdown 语法，包括标题、清单、程式码区块等： &gt; ## This is a header. &gt; &gt; 1. This is the first list item. &gt; 2. This is the second list item. &gt; &gt; Here&apos;s some example code: &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何标准的文字编辑器都能简单地建立 email 样式的引言，例如 BBEdit ，你可以选取文字后然后从选单中选择增加引言阶层。 清單 Markdown 支持有序清单和无序清单。 无序清单使用星号、加号或是减号作为清单标记： * Red * Green * Blue 等同于： + Red + Green + Blue 也等同于： - Red - Green - Blue 有序清单则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish 很重要的一点是，你在清单标记上使用的数字并不会影响输出的 HTML 结果，上面的清单所产生的 HTML 标记为： &lt;ol&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;McHale&lt;/li&gt; &lt;li&gt;Parish&lt;/li&gt; &lt;/ol&gt; 如果你的清单标记写成： 1. Bird 1. McHale 1. Parish 或甚至是： 3. Bird 1. McHale 8. Parish 你都会得到完全相同的 HTML 輸出。重点在于，你可以让 Markdown 文件的清单数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未來可能会支持有序清单的 start 属性。 清单项目标记通常是放在最左边，但是其实也可以缩排，最多三个空白，项目标记后面则一定要接着至少一个空白或 tab。 要让清单看起来更漂亮，你可以把內容用固定的缩排整理好： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你很懶，那也不一定需要： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 如果清单项目間用空行分开， Markdown 会把项目的內容在输出时用 &lt;p&gt;标签包起來，举例来说： * Bird * Magic 会被转换为： &lt;ul&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;Magic&lt;/li&gt; &lt;/ul&gt; 但是这个： * Bird * Magic 会被转换为： &lt;ul&gt; &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; 清单项目可以包含多个段落，每个项目下的段落都必须缩排 4 个空白或是一个 tab ： 1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩排，看起來会看好很多，当然，再次地，如果你很懶惰，Markdown 也允许： * This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list. 如果要在清单项目內放进引言，那 &gt; 就需要缩排： * A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 如果要放程式码区块的话，该区块就需要缩排两次，也就是 8 个空白或是两个 tab： * A list item with a code block: &lt;code goes here&gt; 当然，项目清单很可能会不小心产生，像是下面这样的写法： 1986. What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜线。 1986\\. What a great season. 程式码区块 和程式相关的写作或是标签语言原始码通常会有已经排版好的程式码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子展示，Markdown 会用 &lt;pre&gt; 和 &lt;code&gt; 标签來把程式码区块包起來。 要在 Markdown 中建立程式码区块很简单，只要简单地缩排 4 个空白或是 1 个 tab 就可以，例如，下面的输入： This is a normal paragraph: This is a code block. Markdown 会转换成： &lt;p&gt;This is a normal paragraph:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;This is a code block. &lt;/code&gt;&lt;/pre&gt; 这个每行一阶的缩排（4 个空白或是 1 个 tab），都会被移除，例如： Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 会被转换为： &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot; beep end tell &lt;/code&gt;&lt;/pre&gt; 一个程式码区块会一直持续到沒有缩排的那一行（或是文件结尾）。 在程式码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩排就可以了，剩下的 Markdown 都会帮你处理，例如： &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 会被转换为： &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;amp;copy; 2004 Foo Corporation &amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt; 程式码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线 你可以在一行中用三个或以上的星号、减号、底线來建立一个分隔线，行內不能有其他东西。你也可以在星号中间插入空白。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- 区段元素 链接 Markdown 支持两种形式的链接语法： 行內和參考两种形式。 不管是哪一种，链接的文字都是用 [方括号] 來标记。 要建立一个行內形式的链接，只要在方括号号后面马上接着括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起來即可，例如： This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. 会产生： &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt; an example&lt;/a&gt; inline link.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt; 如果你是要链接到同样主机的资源，你可以使用相对路径： See my [About](/about/) page for details. 參考形式的链接使用另外一个方括号接在链接文字的括号后面，而在第二个方括号里面要填入用以辨别链接的标识： This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上空白： This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标签的链接內容定义出來： [id]: http://example.com/ &quot;Optional Title Here&quot; 链接定义的形式为： 方括号，里面输入链接的辨别用标识 接着一个冒号 接着一个以上的空白或 tab 接着链接的网址 选择性地接着 title 內容，可以用单引号、双引号或是括弧包着 下面这三种链接的定义都是相同： [foo]: http://example.com/ &quot;Optional Title Here&quot; [foo]: http://example.com/ &apos;Optional Title Here&apos; [foo]: http://example.com/ (Optional Title Here) 请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起來的链接 title。 链接网址也可以用方括号包起來： [id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; 你也可以把 title 属性放到下一行，也可以加一些缩排，网址太长的话，这样会比较好看： [id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot; 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的： [link text][a] [link text][A] 预设的链接标签功能让你可以省略指定链接标签，这种情形下，链接标签和链接文字会视为相同，要用预设链接标签只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： [Google][] 然后定义链接內容： [Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化的标签內也可以包含多个文字： Visit [Daring Fireball][] for more information. 然后接着定义链接： [Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个參考式链接的范例： I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式为： I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面两种写法都会产生下面的 HTML。 &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt; 下面是用行內形式写的同样一段內容的 Markdown 文件，提供作为比较之用： I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;) than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or [MSN](http://search.msn.com/ &quot;MSN Search&quot;). 參考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用參考式的文章本身只有 81 个字元，但是用行內形式的链接卻会增加到 176 个字元，如果是用纯 HTML 格式來写，会有 234 个字元，在 HTML 格式中，标签比文字还要多。 使用 Markdown 的參考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的资讯移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调 Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用兩个 * 或 _ 包起來的话，則会被转成 &lt;strong&gt;，例如： *single asterisks* _single underscores_ **double asterisks** __double underscores__ 会转成： &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开始，就要用什么符好结束。 强调也可以直接插在文字中间： un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： \\*this text is surrounded by literal asterisks\\* 程式码 如果要标记一小段行內程式码，你可以用反引号把它包起來（` ），例如： Use the `printf()` function. 会产生： &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt; 如果要在程式码区段內插入反引号，你可以用多个反引号來开始和结束程式码区段： ``There is a literal backtick (`) here.`` 这段语法会产生： &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt; 程式码区段的起始和结束端都可以放入一个空白，起始端后面一個，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 会产生： &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt; 在程式码区段內，&amp; 和方括号都会被转成 HTML 实体，這这样会比较容易插入 HTML 原始码，Markdown 会把下面这段： Please don&apos;t use any `&lt;blink&gt;` tags. 转为： &lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt; 你也可以这样写： `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`. 以产生： &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt; 图片 很明显地，要在纯文字应用中设计一个 「自然」的语法來插入图片是有一定难度的。 Markdown 使用一种和链接很相似的语法來标记图片，同样也允许两种样式： 行內和參考。 行內图片的语法看起來像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个感叹号 ! 接着一对方括号，里面放上图片的替代文字 接着一对普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 文字。 參考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片參考的名称，图片參考的定义方式则和链接參考一样： [id]: url/to/image &quot;Optional title attribute&quot; 到目前为止， Markdown 还沒有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。 其它 自动链接 Markdown 支持比较简短的自动链接形式來处理网址和电子邮件信箱，只要是用方括号包起來， Markdown 就会自动把它转成链接，链接的文字就和链接位置一样，例如： &lt;http://example.com/&gt; Markdown 会转为： &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt; 自动的邮件链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字元转成 16 进位码的 HTML 实体，这样的格式可以混淆一些不好的信箱地址收集机器人，例如： &lt;address@example.com&gt; Markdown 会转成： &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65; &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111; &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61; &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt; 在浏览器里面，这段字串会变成一个可以点击的「address@example.com」链接。 （这种作法虽然可以混淆不少的机器人，但并无法全部挡下來，不过这样也比什么都不做好些。无论如何，公开你的信箱终究会引來广告信件的。） 跳脫字元 Markdown 可以利用反斜线來插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式來做出强调效果（但不用 &lt;em&gt; 标签），你可以在星号的前面加上反斜线： \\*literal asterisks\\* Markdown 支持在下面这些符号前面加上反斜线來帮助插入普通的符号： \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 大括号 [] 方括号 () 括号 # 井字号 + 加号 - 減号 . 英文句点 ! 感叹号 资料出处","categories":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/categories/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/tags/markdown/"}],"keywords":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/categories/markdown/"}]},{"title":"markdown-syntax Markdown 语法示例 二","slug":"markdown-syntax2","date":"2016-09-08T14:46:51.000Z","updated":"2016-09-08T15:46:56.000Z","comments":true,"path":"2016/09/08/markdown-syntax2/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/08/markdown-syntax2/","excerpt":"","text":"强制换行在行的结尾添加两个或者更多的空格可以强制换行，也就是HTML中的&lt;br /&gt;上面一行以两个空格结尾 12在行的结尾添加两个或者更多的空格可以强制换行，也就是HTML中的`&lt;br /&gt;`**上面一行以两个空格结尾 水平线三个及以上的星号或者破折号 1234三个及以上的星号或者破折号***---- - - 标题这是H1这是H2这是H1这是H2这是H3这是H4这是H5这是H612345678910这是H1======这是H2------# 这是H1## 这是H2### 这是H3#### 这是H4##### 这是H5###### 这是H6 删除线使用两个波浪线包裹文字这些是删除掉的 1~~这些是删除掉的~~ 代码块开头使用三个及以上的反引号，再在结尾使用相同数量的反引号即可123***此处使用了星号代替了反引号*** 表格简单表格 第一列 第二列 第三列 内容 内容 内容 内容 内容 内容 可以在部下方横线两端添加冒号来进行内容左右排版，默认左对齐 第一列 第二列 第三列 左对齐 居中 右对齐 123456789101112简单表格第一列 | 第二列 | 第三列----- | ----- | -----内容 | 内容 | 内容内容 | 内容 | 内容可以在部下方横线两端添加冒号来进行内容左右排版，默认左对齐第一列 | 第二列 | 第三列:----- | :-----:| -----:左对齐 | 居中 | 右对齐 参考资料Markdown中文简单文档Markdown可视化编辑工具–Mou","categories":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/categories/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/tags/markdown/"}],"keywords":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/categories/markdown/"}]},{"title":"markdown-syntax markdown 语法示例 （一）","slug":"markdown-syntax","date":"2016-09-07T13:43:26.000Z","updated":"2016-09-07T15:15:39.000Z","comments":true,"path":"2016/09/07/markdown-syntax/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/07/markdown-syntax/","excerpt":"","text":"H1,两个#就是H2,以此类推12# Markdown## Markdown 粗体和斜体强调 还可以和斜体混合使用有的时候你可能需要很长一段文字都是粗体，可以直接换行就像现在这样12强调，使用两个*号或者双下划线_斜体，使用一个*号或者单下划线_ 引用 右扩折号 &gt; 用来当做引用标记，注意：如果要使用源生&gt;,就需要使用转义符号&amp;gt; 1&gt; 右扩折号 &amp;gt; 用来当做引用标记，`注意`：如果要使用源生&amp;gt;,就需要使用转义符号`&amp;gt;` 链接和邮箱简单的邮箱&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;链接. 简单的行链接 https://zhanghqgit.github.io. 带名称的行链接 张恒强 带提示的多行链接张恒强 引用链接：reference style.id可以在文档的任何地方定义引用的链接地址 定义引用链接的地址时，链接的提示是可选的 格式： [链接名称](链接地址 链接提示(提示是可选的))12345678910111213简单的邮箱&lt;example@example.com&gt;链接简单的行链接 &lt;https://zhanghqgit.github.io&gt;.带名称的行链接 [张恒强](https://zhanghqgit.github.io)带提示的多行链接 [张恒强](https://zhanghqgit.github.io &quot;张恒强的简单博客&quot;)引用链接:[reference style][id].`id`可以在文档的任何地方定义引用的链接地址[id]: https://zhanghqgit.github.io &quot;张恒强的简单博客&quot;定义引用链接的地址时，链接的提示是可选的 图片简单定义图片 提示是可选的 图片的源也可以使用引用，和链接引用一样 格式：![图片名称](图片src 图片提示)123456简单定义图片 ![GitHub](https://avatars0.githubusercontent.com/u/7802877?v=3&amp;amp;s=34 &quot;这里是提示&quot;)提示是可选的图片的源也可以使用引用，和链接引用一样![GitHub][2][2]: https://avatars0.githubusercontent.com/u/7802877?v=3&amp;amp;s=34 &quot;提示&quot; 行代码及块代码行代码是用英文的反引号括起来. 块代码的每一行都使用至少一个Tab或者4个空格的缩进 alert(&apos;Hello World!&apos;) 12345`行代码`是使用英文的反引号括起来.****快代码的每一行都使用至少一个Tab或者4个空格的缩进****alert(&apos;Hello World!&apos;)`注意`:此处使用四个*代替了Tab或者4个空格 有序列表有序列表使用数字 “1.”,注意: 后面一定要加一个空格，且数字的大小不代表列表项目的顺序 有序列表1 有序列表3 有序列表2 12345有序列表使用数字 &quot;1.&quot;,`注意`:后面一定要加一个空格，切腹数字的大小不代表列表项目的顺序1. 有序列表13. 有序列表32. 有序列表2 无序列表无序列表使用 “*” 或者 “-“,注意:同有序列表一样，都需要再后面加一个空格 无序列表1 无序列表2 无序列表3 无序列表4 无序列表5 无序列表6 1234567无序列表使用 &quot;*&quot; 或者 &quot;-&quot;,`注意`:同有序列表一样，都需要再后面加一个空格* 无序列表1* 无序列表2* 无序列表3- 无序列表4- 无序列表5- 无序列表6","categories":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/categories/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/tags/markdown/"}],"keywords":[{"name":"markdown","slug":"markdown","permalink":"https://zhanghqgit.github.io/categories/markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-09-06T15:46:35.000Z","updated":"2016-09-06T15:46:35.000Z","comments":true,"path":"2016/09/06/hello-world/","link":"","permalink":"https://zhanghqgit.github.io/2016/09/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}